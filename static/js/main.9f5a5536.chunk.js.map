{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","renderItems","passItems","map","item","className","key","type","id","value","text","onChange","e","updateItem","target","onClick","deleteItem","App","state","items","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filterItems","filter","editItems","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,gLCwC5BC,MApCf,SAAmBC,GAEf,IAEMC,EAFUD,EAAME,UAEMC,KAAI,SAACC,GAC7B,OACI,yBAAKC,UAAU,aAAaC,IAAKF,EAAKE,KAElC,2BACG,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAC3BG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,WAAWD,EAAEE,OAAOL,MAAML,EAAKE,QAIjD,4BAAQS,QAAS,WAAKf,EAAMgB,WAAWZ,EAAKE,OAA5C,YAQZ,OACQ,6BACCL,ICgDEgB,E,kDA1Eb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,MAAM,GACNC,YAAY,CACVV,KAAK,GACLJ,IAAI,KAGR,EAAKe,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKN,WAAW,EAAKA,WAAWM,KAAhB,gBAChB,EAAKT,WAAW,EAAKA,WAAWS,KAAhB,gBAZC,E,wDAcTV,GACVY,KAAKC,SAAS,CAACL,YAAY,CACzBV,KAAKE,EAAEE,OAAOL,MACdH,IAAIoB,KAAKC,W,8BAKLf,GACNA,EAAEgB,iBACF,IAAMC,EAASL,KAAKN,MAAME,YAG1B,GADAU,QAAQC,IAAIF,GACM,KAAfA,EAAQnB,KACX,CACK,IAAMsB,EAAS,GAAD,mBAAKR,KAAKN,MAAMC,OAAhB,CAAsBU,IACvCL,KAAKC,SAAS,CACZN,MAAMa,EACNZ,YAAY,CACVV,KAAK,GACLJ,IAAI,S,iCAODA,GACT,IAAM2B,EAAYT,KAAKN,MAAMC,MAAMe,QAAO,SAAA9B,GAAI,OAAIA,EAAKE,MAAMA,KAC9DkB,KAAKC,SAAS,CAACN,MAAMc,M,iCAGXvB,EAAKJ,GACd,IAAM6B,EAAYX,KAAKN,MAAMC,MAC7BgB,EAAUhC,KAAI,SAACC,GAIb,OAHGA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,GAEL,QAETc,KAAKC,SAAS,CAACN,MAAMgB,M,+BAGrB,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cAChB,0BAAMG,GAAG,aAAa4B,SAAUZ,KAAKD,SACnC,2BAAOhB,KAAK,OAAO8B,YAAY,eAAe5B,MAAOe,KAAKN,MAAME,YAAYV,KAAMC,SAAUa,KAAKH,cACjG,4BAAQd,KAAK,UAAb,QAEF,kBAAC,EAAD,CAAWL,UAAWsB,KAAKN,MAAMC,MACjCH,WAAYQ,KAAKR,WACjBH,WAAYW,KAAKX,mB,GAnEPyB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.9f5a5536.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css'\r\n\r\n\r\nfunction ListItems(props) {\r\n    //console.log(\"dygdhg\",props);\r\n    const propItems=props.passItems;\r\n    //console.log(propItems);\r\n    const renderItems=propItems.map((item) =>{\r\n        return (\r\n            <div className='renderList' key={item.key}>\r\n\r\n                <p>\r\n                   <input type='text' id={item.key}\r\n                    value={item.text}\r\n                    onChange={\r\n                        (e) =>{\r\n                            props.updateItem(e.target.value,item.key)\r\n                        }\r\n                    }\r\n                    /> \r\n                <button onClick={()=>{props.deleteItem(item.key)}}>Del</button>\r\n                </p>\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n    })\r\n    return (\r\n            <div>\r\n            {renderItems}\r\n            </div>\r\n        \r\n    )\r\n}\r\n// ReactDOM.render(\r\n\r\n// )\r\n\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput=this.handleInput.bind(this);\n    this.addItem=this.addItem.bind(this);\n    this.deleteItem=this.deleteItem.bind(this);\n    this.updateItem=this.updateItem.bind(this);\n  }\nhandleInput(e){\n  this.setState({currentItem:{\n    text:e.target.value,\n    key:Date.now()\n  }})\n}\n\n\naddItem(e){\n  e.preventDefault();\n  const newItem =this.state.currentItem;\n // let newItems=[\"\"];\n  console.log(newItem);\n  if(newItem.text!==\"\")\n  {\n       const newItems=[...this.state.items,newItem];\n    this.setState({\n      items:newItems,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n  }\n\n}\n\ndeleteItem(key){\n  const filterItems=this.state.items.filter(item => item.key!==key);\n this.setState({items:filterItems});\n}\n\nupdateItem(text,key){\n  const editItems = this.state.items;\n  editItems.map((item) =>{\n    if(item.key===key){\n      item.text=text;\n    }\n    return null;\n  })\n  this.setState({items:editItems});\n}\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"type here...\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\n          <button type=\"submit\">Add</button> \n        </form>\n        <ListItems passItems={this.state.items} \n        deleteItem={this.deleteItem}\n        updateItem={this.updateItem}\n        ></ListItems>\n      </header>\n    </div>\n  );\n} \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}